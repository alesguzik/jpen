package jpen.provider.wintab;

import java.awt.Component;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import jpen.PButton;
import jpen.PButtonEvent;
import jpen.Pen;
import jpen.PKind;
import jpen.PLevel;
import jpen.PLevelEvent;
import jpen.provider.AbstractPenDevice;
import jpen.provider.Utils;

class WintabDevice
	extends AbstractPenDevice {
	final WintabProvider wintabProvider;
	public final int cursor;
	private int lastButtonsValues;
	private final Point2D.Float componentLocation=new Point2D.Float();

	WintabDevice(WintabProvider wintabProvider, int cursor) {
		super(wintabProvider);
		this.wintabProvider=wintabProvider;
		this.cursor=cursor;
		setKindTypeNumber(getDefaultKindTypeNumber());
		setEnabled(true);
	}

	private int getDefaultKindTypeNumber() {
		WintabAccess.CursorType cursorType=wintabProvider.wintabAccess.getCursorType(cursor);
		switch(cursorType) {
		case PENTIP:
			return PKind.Type.STYLUS.ordinal();
		case PUCK:
			return PKind.Type.CURSOR.ordinal();
		case PENERASER:
			return PKind.Type.ERASER.ordinal();
		}
		return PKind.Type.CURSOR.ordinal();
	}

	public String getName() {
		return wintabProvider.wintabAccess.getCursorName(cursor);
	}

	void scheduleEvents() {
		if(!getEnabled())
			return;
		scheduleLevelEvent();
		scheduleButtonEvents();
	}

	private void scheduleButtonEvents() {
		int newButtonsValues=wintabProvider.wintabAccess.getButtons();
		if(newButtonsValues==lastButtonsValues)
			return;
		for(PButton.Type buttonType:PButton.Type.values()) {
			boolean value=getButtonState(newButtonsValues, getButtonIndex(buttonType));
			getPen().scheduleButtonEvent(new PButton(buttonType.ordinal(), value));
		}
		lastButtonsValues=newButtonsValues;
	}


	private int getButtonIndex(PButton.Type type) {
		switch(type) {
		case LEFT:
			return 0;
		case RIGHT:
			return 1;
		case CENTER:
			return 2;
		default:
			throw new AssertionError();
		}
	}

	private boolean getButtonState(int buttonsState, int buttonIndex) {
		return (buttonsState&(1<<buttonIndex))>0;
	}

	private final Map<PLevel.Type,Float> levelTypeToValue=new EnumMap<PLevel.Type, Float>(PLevel.Type.class);
	private final List<PLevel> changedLevels=new ArrayList<PLevel>();
	private final List<Component> componentToParentChain=new ArrayList<Component>();

	private final boolean coordinatesInsidePenComponent() {
		int x=levelTypeToValue.get(PLevel.Type.X).intValue();
		int y=levelTypeToValue.get(PLevel.Type.Y).intValue();
		Component c;
		for(int i=componentToParentChain.size(); --i>=0;) {
			c=componentToParentChain.get(i);
			x-=c.getX();
			if(x<0 || x>c.getWidth())
				return false;
			y-=c.getY();
			if(y<0 || y>c.getHeight())
				return false;
		}
		return true;
	}

	private void scheduleLevelEvent() {
		levelTypeToValue.clear();
		for(PLevel.Type levelType:PLevel.Type.values())
			levelTypeToValue.put(levelType, getMultRangedValue(levelType));

		Utils.getLocationOnScreen(getComponent(), componentLocation, componentToParentChain);
		if(!coordinatesInsidePenComponent()) {
			componentToParentChain.clear();
			wintabProvider.wintabAccess.setEnabled(false);
			return ;
		}
		componentToParentChain.clear();

		for(PLevel.Type levelType:PLevel.Type.values()) {
			float value=PLevel.getCoordinateValueInsideComponent(getComponent().getSize(), componentLocation,  levelType, levelTypeToValue.get(levelType));
			if(value<0) {
				wintabProvider.wintabAccess.setEnabled(false);
				changedLevels.clear();
				return;
			}
			changedLevels.add(new PLevel(levelType.ordinal(), value));
		}

		if(getPen().scheduleLevelEvent(this, changedLevels))
		  wintabProvider.moveMouseToLastScheduledLocation(componentLocation);
		changedLevels.clear();
	}

	private float getRangedValue(PLevel.Type type) {
		float rangedValue=wintabProvider.getLevelRange(type).getRangedValue(
		                    wintabProvider.wintabAccess.getValue(type));
		return type.equals(PLevel.Type.Y)? 1f-rangedValue: rangedValue;
	}

	private float getMultRangedValue(PLevel.Type type) {
		return getRangedValue(type)*wintabProvider.getLevelRangeMult(type);
	}
}
